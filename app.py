# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N6gtVNG9kdHkBldi5SKzXn-NR214Szkk
"""

import streamlit as st
import pandas as pd
import numpy as np
import re
import joblib
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder, FunctionTransformer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer

# --- Define the select_description function here ---
def select_description(x):
    return x['Description']

# --- Define other custom functions used in the pipeline ---
def clean_description(text):
    text = re.sub(r"<.*?>", "", str(text))  # Remove HTML
    text = text.lower()
    text = re.sub(r"[^a-zA-Z0-9\\s]", "", text)  # Remove special characters
    return text

def predict_adoption_speed(pet_info: dict, description: str, pipeline: Pipeline, training_columns: list) -> int:
    input_df = pd.DataFrame([pet_info])
    input_df["Description"] = clean_description(description)

    for col in training_columns:
        if col not in input_df.columns:
            input_df[col] = np.nan

    input_df = input_df[training_columns]

    # Ensure categorical columns are treated as strings
    categorical_features = ['Type', 'Gender', 'MaturitySize', 'FurLength', 'Vaccinated',
                            'Dewormed', 'Sterilized', 'Health', 'StateName', 'Breed1Type',
                            'Breed2Type', 'MainBreed', 'SecondBreed', 'ColorName1',
                            'ColorName2', 'ColorName3']
    for col in categorical_features:
        if col in input_df.columns:
            input_df[col] = input_df[col].astype(str)

    return pipeline.predict(input_df)[0]

# Load the trained pipeline and training columns
try:
    pipeline_rf, saved_columns = joblib.load("pipeline_rf.pkl")
except FileNotFoundError:
    st.error("Error: 'pipeline_rf.pkl' not found. Make sure to run the training script first.")
    st.stop()
except AttributeError as e:
    st.error(f"Error loading the model: {e}")
    st.stop()

# Load label files (assuming they are in the same directory)
try:
    breed_labels_df = pd.read_csv("breed_labels.csv")
    color_labels_df = pd.read_csv("color_labels.csv")
    state_labels_df = pd.read_csv("state_labels.csv")
except FileNotFoundError as e:
    st.error(f"Error: {e}. Make sure the label files are in the same directory.")
    st.stop()

# --- Streamlit App Layout ---
st.title("Pet Adoption Speed Prediction")
st.write("Enter the pet's information to predict how quickly it might be adopted.")

# --- Input Fields ---
with st.sidebar:
    st.header("Pet Information")
    age = st.number_input("Age (in months)", min_value=0, max_value=240, value=12)
    quantity = st.number_input("Number of Pets in Listing", min_value=1, max_value=20, value=1)
    fee = st.number_input("Adoption Fee (in $)", min_value=0, max_value=1000, value=0)
    video_amt = st.number_input("Number of Videos", min_value=0, max_value=10, value=0)
    photo_amt = st.number_input("Number of Photos", min_value=0, max_value=20, value=1)

    type_options = ["Dog", "Cat"]
    type = st.selectbox("Type", type_options)

    gender_options = ["Male", "Female", "Mixed"]
    gender = st.selectbox("Gender", gender_options)

    maturity_size_options = ["Small", "Medium", "Large", "Extra Large"]
    maturity_size = st.selectbox("Maturity Size", maturity_size_options)

    fur_length_options = ["Short", "Medium", "Long"]
    fur_length = st.selectbox("Fur Length", fur_length_options)

    vaccinated_options = ["Yes", "No", "Not Sure"]
    vaccinated = st.selectbox("Vaccinated", vaccinated_options)

    dewormed_options = ["Yes", "No", "Not Sure"]
    dewormed = st.selectbox("Dewormed", dewormed_options)

    sterilized_options = ["Yes", "No", "Not Sure"]
    sterilized = st.selectbox("Sterilized", sterilized_options)

    health_options = ["Healthy", "Minor Injury", "Serious Injury"]
    health = st.selectbox("Health Condition", health_options)

    # Get unique state names from the loaded dataframe
    state_name_options = state_labels_df["StateName"].unique().tolist()
    state_name = st.selectbox("State", state_name_options)

    # Get unique breed names
    main_breed_options = breed_labels_df["BreedName"].unique().tolist()
    main_breed = st.selectbox("Main Breed", [""] + main_breed_options)
    second_breed = st.selectbox("Second Breed (if any)", [""] + main_breed_options)

    # Determine breed types based on selection
    breed1_type = "Breed" if main_breed else np.nan
    breed2_type = "Breed" if second_breed else np.nan

    # Get unique color names
    color_name_options = color_labels_df["ColorName"].unique().tolist()
    color_name1 = st.selectbox("Color 1", [""] + color_name_options)
    color_name2 = st.selectbox("Color 2 (if any)", [""] + color_name_options)
    color_name3 = st.selectbox("Color 3 (if any)", [""] + color_name_options)

st.subheader("Pet Description")
description = st.text_area("Enter a description of the pet:", height=150)

# --- Prediction ---
if st.button("Predict Adoption Speed"):
    if description.strip():
        pet_info = {
            "Age": age,
            "Quantity": quantity,
            "Fee": fee,
            "VideoAmt": video_amt,
            "PhotoAmt": photo_amt,
            "Type": type,
            "Gender": gender,
            "MaturitySize": maturity_size,
            "FurLength": fur_length,
            "Vaccinated": vaccinated,
            "Dewormed": dewormed,
            "Sterilized": sterilized,
            "Health": health,
            "StateName": state_name,
            "Breed1Type": breed1_type,
            "Breed2Type": breed2_type,
            "MainBreed": main_breed if main_breed else np.nan,
            "SecondBreed": second_breed if second_breed else np.nan,
            "ColorName1": color_name1 if color_name1 else np.nan,
            "ColorName2": color_name2 if color_name2 else np.nan,
            "ColorName3": color_name3 if color_name3 else np.nan,
            "HasName": 1 if st.session_state.get('pet_name', '').strip() else 0, # Infer from name input (if you add it)
            "IsMixBreed": 1 if second_breed else 0,
            "DescriptionLength": len(description)
        }

        prediction = predict_adoption_speed(pet_info, description, pipeline_rf, saved_columns)

        adoption_speed_labels = {
            0: "Same Day",
            1: "1st Week",
            2: "2nd Week",
            3: "3rd Week",
            4: "More Than 1 Month"
        }

        st.subheader("Prediction Result:")
        st.write(f"The predicted adoption speed is: **{adoption_speed_labels.get(prediction, 'Unknown')}**")
    else:
        st.warning("Please enter a description for the pet.")

# Optional: Add a text input for the pet's name to make the 'HasName' feature interactive
st.sidebar.subheader("Optional")
pet_name = st.sidebar.text_input("Pet Name (optional):", key="pet_name")